<?php


namespace Iamamirsalehi\LaravelBalance\tests\Unit\Services\Balance;


use Iamamirsalehi\LaravelBalance\Models\Withdraw;
use Iamamirsalehi\LaravelBalance\Services\Balance\BalanceService;
use Iamamirsalehi\LaravelBalance\Tests\TestCase;
use Illuminate\Support\Facades\DB;

class WithdrawConfirmedTest extends TestCase
{
    public function test_we_can_confirm_a_withdraw()
    {
        list($user_id, $coin_id) = $this->getCoinAndUserId();

        BalanceService::deposit([
            'user_id' => $user_id,
            'coin_id' => $coin_id,
            'price' => 300000
        ])->handle();

        BalanceService::withdrawUnconfirmedyet([
            'user_id' => $user_id,
            'coin_id' => $coin_id,
            'price' => 200000
        ])->handle();

        $withdraw_unconfrimed_yet = DB::table('withdraws')
            ->where('user_id', '=', $user_id)
            ->where('coin_id', '=', $coin_id)
            ->orderBy('id', 'desc')
            ->first();

        $data = [
            'user_id' => $user_id,
            'coin_id' => $coin_id,
            'withdraw_id' => $withdraw_unconfrimed_yet->id
        ];

        $confirmed_withdraw = BalanceService::withdrawConfirmed($data)->handle();

        $this->assertIsArray($confirmed_withdraw);
        $this->assertEquals(Withdraw::CONFIRMED, $confirmed_withdraw['is_admin_confirmed']);
        $this->assertEquals(100000, $confirmed_withdraw['equity']);
        $this->assertEquals(-200000, $confirmed_withdraw['action_asset']);
        $this->assertEquals(100000, $confirmed_withdraw['asset']);
        $this->assertEquals(-200000, $confirmed_withdraw['action_liability']);
        $this->assertEquals(0, $confirmed_withdraw['liability']);
    }

    public function tearDown(): void
    {
        $this->truncate();

        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}