<?php


namespace Iamamirsalehi\LaravelBalance\tests\Unit\Services\Balance;


use Iamamirsalehi\LaravelBalance\Services\Balance\BalanceService;
use Iamamirsalehi\LaravelBalance\src\Facades\Balance;
use Iamamirsalehi\LaravelBalance\Tests\TestCase;
use Illuminate\Support\Facades\DB;

class RejectedWithdrawTest extends TestCase
{
    public function test_we_can_reject_a_unconfirmed_withdraw()
    {
        list($user_id, $coin_id) = $this->getCoinAndUserId();

        BalanceService::deposit([
            'user_id' => 1,
            'coin_id' => 1,
            'price' => 300000
        ])->handle();

        BalanceService::withdrawUnconfirmedyet([
            'user_id' => 1,
            'coin_id' => 1,
            'price' => 200000
        ])->handle();

        $unconfirmed_withdraw = DB::table('withdraws')
            ->where('user_id', '=', $user_id)
            ->where('coin_id', '=', $coin_id)
            ->orderBy('id', 'desc')
            ->first();

        $data = [
            'user_id' => $user_id,
            'coin_id' => $coin_id,
            'withdraw_id' => $unconfirmed_withdraw->id
        ];

        $rejected_withdraw = BalanceService::rejectedWithdraw($data)->handle();

        $this->assertIsArray($rejected_withdraw);
        $this->assertEquals(-200000, $rejected_withdraw['action_liability']);
        $this->assertEquals($rejected_withdraw['asset'], $rejected_withdraw['equity']);
        $this->assertEquals(300000, $rejected_withdraw['asset']);
        $this->assertEquals(300000, $rejected_withdraw['equity']);
        $this->assertEquals(0, $rejected_withdraw['liability']);
        $this->assertEquals(0, $rejected_withdraw['action_asset']);
    }

    public function tearDown(): void
    {
        $this->truncate();

        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}